/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "sxfs.h"
#include "peer_info.h"
#include <sstream>
using namespace std;


static map<pair<char *,int>,string> clientList;
static map<pair<char *,int>,string >::iterator it = clientList.begin();


//client_list buildClientList() {
//	client_list res;
//	res.client_list_val = new client_details[clientList.size()];
//	res.client_list_len = clientList.size();
//	int pos = 0;
//	for (int i = 0; i < clientList.size(); i++) {
//		client_details *c = res.client_list_val + pos;
//		c->client_node.ip = new char[clientList[i].first.first.length() + 1];
//		strcpy(c->client_node.ip, clientList[i].first.first.c_str());
//		c->client_node.port = clientList[i].first.second;
//		c->c_file_list = clientList[i].second;
//		pos++;
//	}
//	return res;
//}
//
//void outputClientList() {
//	//output server list;
//	cout << "outputing server list:" << endl;
//    client_list clients = buildClientList();
//	int pos = -1;
//	std::string delimiter = ".txt";
//	std::string name = "";
//	for (int i = 0; i < clients.client_list_len; i++) {
//		cout << (clients.client_list_val + i)->client_node.ip << " " << (clients.client_list_val + i)->client_node.port << " ";
//		client_file_list  temp_list = (clients.client_list_val + i)->c_file_list;
//		pos = -1;
//		name = "";
//		string remaining_list(temp_list, strlen(temp_list));
//		do {
//			pos = remaining_list.find(delimiter);
//			name = remaining_list.substr(0, pos);   //returning line
//			remaining_list = remaining_list.substr(pos + 1);  //returning rest of levels
//			cout << name << " " << endl;
//		} while(pos >= 0);
//	}
//	cout << endl;
//}

node_list *
file_find_1_svc(char *arg1,  struct svc_req *rqstp)
{
	static node_list result;
//	result.node_list_val = new node[MAXCLIENTS];
//	result.node_list_len = MAXCLIENTS;
	result.node_list_val = new node;
	result.node_list_len = 0;
	//outputClientList();
	client_file_list f_list;
	int pos = -1;
	int len = 0;
	cout << "node list is: \n";
	map<pair<char *,int>, string >::iterator iter;
 	for (iter = clientList.begin(); iter != clientList.end(); ++iter) {
		f_list = new char[(iter->second).length() +1];
		strcpy(f_list,iter->second.c_str());
		string remaining_list(f_list, strlen(f_list));
		pos = remaining_list.find(arg1);
		if(pos >= 0){
			result.node_list_len++;
			result.node_list_val->ip = new char[MAXIP];
			result.node_list_val->port = iter->first.second;
			strcpy(result.node_list_val->ip,iter->first.first);
			cout << result.node_list_val->ip << ":" << result.node_list_val->port << "\n";
			break;
		}
	}
	return &result;
}

int *
update_list_1_svc(IP arg1, int arg2, client_file_list arg3, struct svc_req *rqstp)
{
	static int  result;

	char *ip = new char[strlen(arg1) + 1];
	strcpy(ip, arg1);
	stringstream self_file_list;
	self_file_list << arg3;
	clientList.insert (it, std::pair<pair<char *,int>,string >(make_pair(ip,arg2), self_file_list.str()));
	it++;
	cout << "arg3: " << ip << " " << arg2 << " " << arg3 << endl;

	return &result;
}
